/// Base class for all all client-side errors that can be generated by the app
sealed class AppException implements Exception {
  AppException(this.code, this.message);

  final String code;
  final String message;

  @override
  String toString() => message;

  @override
  bool operator ==(Object other) {
    if (identical(this, other)) return true;
    return other is AppException &&
        other.code == code &&
        other.message == message;
  }

  @override
  int get hashCode => Object.hash(code, message);
}

class LocationNotPickedException extends AppException {
  LocationNotPickedException()
      : super(
          'location-not-picked',
          'User location not available. Please pick your location before clicking on save button',
        );
}

class LocationPermissionDeniedException extends AppException {
  LocationPermissionDeniedException()
      : super(
          'location-permission-denied',
          'Location Permission Denied. Please click on allow button to continue.',
        );
}

class LocationPermissionDeniedForeverException extends AppException {
  LocationPermissionDeniedForeverException()
      : super(
          'location-permission-denied-forever',
          'This app requires access to location permissions to function properly. Please enable the permission in settings to continue.',
        );
}

class LocationServicesNotEnabledException extends AppException {
  LocationServicesNotEnabledException()
      : super(
          'location-services-not-enabled',
          'This app requires access to location services to function properly. Please enable the location services in settings to continue.',
        );
}
